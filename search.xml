<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[有关最近业务的问卷系统的分析]]></title>
    <url>%2F2020%2F04%2F25%2F%E6%9C%89%E5%85%B3%E6%9C%80%E8%BF%91%E4%B8%9A%E5%8A%A1%E7%9A%84%E9%97%AE%E5%8D%B7%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[关于最近做的一个问卷功能的总结功能概要：需要一个问卷功能，提供对应的问卷的设计，问卷的发布，统计功能，打分功能。问卷兼容中英文。题目类型兼容选择题，多选题，还有问答题。 数据库的设计123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125-- 问卷模板表CREATE TABLE `sys_questionnaire_template` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `template_name` varchar(200) NOT NULL COMMENT '问卷模板名称', `template_name_en` varchar(200) NOT NULL DEFAULT '' COMMENT '问卷模板英文名称', `template_desc` varchar(1000) DEFAULT NULL COMMENT '问卷模板描述', `template_desc_en` varchar(1000) DEFAULT NULL COMMENT '问卷模板英文描述', `en` char(1) NOT NULL COMMENT '是否有英文版', `status` varchar(30) NOT NULL DEFAULT 'CREATE' COMMENT '模板状态 CREATE：创建，PUBLISH：发布', `enable` char(1) NOT NULL DEFAULT '1' COMMENT '启用禁用', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除 0未删除', `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='问卷模板表';-- 题目表CREATE TABLE `sys_questionnaire_question` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `question_name` varchar(1000) NOT NULL COMMENT '题目内容', `question_name_en` varchar(1000) NOT NULL DEFAULT '' COMMENT '题目英文名称', `score_limit` double NOT NULL DEFAULT '0' COMMENT '-1代表没有分数上限', `type` varchar(20) NOT NULL COMMENT '[单选：SINGLE_CHOICE,多选MULTIPLE_CHOICE,问答：QUESTION_AND_ANSWER]', `template_id` bigint(20) NOT NULL COMMENT '模板id', `required` char(1) NOT NULL DEFAULT '1' COMMENT '是否必填', `answer_symbol` char(1) NOT NULL DEFAULT '0' COMMENT '这个题目是否是答案标记（答案标记是标记问卷的，比如姓名，不会统计分数，会在答案统计中优先展示出来，便于搜索答案）', `custom_score` char(1) NOT NULL DEFAULT '0' COMMENT '是否可以自己打分（在审核的时候可以自己打分的项目，不能超过分数上限）', `enable` char(1) NOT NULL DEFAULT '1' COMMENT '启用禁用', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除,0未删除', `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='题目表';-- 选项表CREATE TABLE `sys_questionnaire_choice` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `content` varchar(500) NOT NULL COMMENT '内容', `content_en` varchar(500) NOT NULL DEFAULT '' COMMENT '选项英文内容', `score` double NOT NULL DEFAULT '0' COMMENT '选项分数', `question_id` bigint(20) NOT NULL COMMENT '问题id', `addition_input` char(1) NOT NULL DEFAULT '0' COMMENT '是否有额外的输入框 1: 有 0：没有', `addition_input_required` char(1) NOT NULL DEFAULT '0' COMMENT '额外输入框是否必填 1：必填 0：非必填', `enable` char(1) DEFAULT '1' COMMENT '启用禁用', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除 0未删除', `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='问题选项表';-- 问卷发布表CREATE TABLE `sys_questionnaire_publish` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `publish_name` varchar(100) NOT NULL COMMENT '发布名称', `template_id` bigint(20) NOT NULL COMMENT '问卷模板id', `status` varchar(30) NOT NULL DEFAULT '0' COMMENT '问卷状态，TEMP：草稿，PUBLISH：发布，STOP:停止，REVOKE:撤回', `type` varchar(30) NOT NULL COMMENT '问卷类型，调研：RESEARCH，评价：EVALUATE，考试：TEST，其他：OTHER', `start_time` datetime DEFAULT NULL COMMENT '开始时间', `end_time` datetime DEFAULT NULL COMMENT '结束时间', `need_check` char(1) NOT NULL DEFAULT '0' COMMENT '是否需要审核接口1：需要审核，0：不需要审核', `calculate` char(1) NOT NULL DEFAULT '1' COMMENT '是否需要计算分数', `origin` varchar(30) NOT NULL DEFAULT 'SYSTEM' COMMENT '发布来源，是从哪发布的 SYSTEM:系统发放,TRAIN_MANAGE：培训管理,TRAIN_APPLY：培训申请', `enable` char(1) NOT NULL DEFAULT '1' COMMENT '启用禁用', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除 0未删除', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='问卷发布表';-- 问卷答卷表CREATE TABLE `sys_questionnaire_answer` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `publish_id` bigint(20) NOT NULL COMMENT '发布id', `from_ip` varchar(60) DEFAULT NULL COMMENT '来源ip', `judged` char(1) NOT NULL DEFAULT '0' COMMENT '是否已经被评价', `score` double DEFAULT '0', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除 0未删除', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='问卷结果表';-- 问卷结果表CREATE TABLE `sys_questionnaire_result` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `answer_id` bigint(20) NOT NULL COMMENT '答卷id', `question_id` bigint(20) NOT NULL COMMENT '问题id', `choice_id` bigint(20) DEFAULT NULL COMMENT '结果id', `content` varchar(1000) DEFAULT NULL COMMENT '填写的内容（有选项就是该选额外输入框填写的内容，没有选项就是问题的回答内容）', `sort` tinyint(4) NOT NULL DEFAULT '1' COMMENT '排序', `enable` char(1) NOT NULL DEFAULT '1' COMMENT '启用禁用', `del` char(1) NOT NULL DEFAULT '0' COMMENT '1删除 0未删除', `create_user` bigint(20) NOT NULL COMMENT '创建人，填写的人，如果系统内填写就有，系统外填写就没有', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='问卷结果答案表';-- 结果审核表CREATE TABLE `sys_questionnaire_evaluate` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id', `answer_id` bigint(20) NOT NULL COMMENT '答卷id', `question_id` bigint(20) NOT NULL COMMENT '问题id', `score` double NOT NULL DEFAULT '0' COMMENT '评价分数', `judge` bigint(20) DEFAULT NULL COMMENT '评价的人', `create_user` bigint(20) NOT NULL COMMENT '创建人', `modify_user` bigint(20) DEFAULT NULL COMMENT '更新人', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `modify_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='结果审核表'; 感觉自己设计的缺陷设计上只能支持选择填空简答题，没有用到其他复杂的题目，如果有复杂的题目那么最好将选项表改为问题的回答表。比如有填空题，那么每一个空的答案都是问题答案表的一条数据。每题的结果表也要改变，比如如果是排序题，答题结果就会是一个排序结果。那么题目的答案，和答案的结果JSON就会很灵活，因此这时候考虑还是用非关系型数据库做比较好，比如MongoDb。但是具体逻辑还是得具体分析，需要程序层将各种问题和结果的分析，进行抽象，每加一种问题类型，就加一种抽象的实现即可。这个抽象需要抽象的有问题的统计方式，问题答案的保存方式，问题的xxx功能等。问题必须进行抽象，否则很难进行扩展。尤其是关系型数据库，扩展改库太过于麻烦，可能还影响之前的业务。 还有一个就是，如果要做考试，各个题目分数的计算方式进行抽象。每次用户填写完成考试，计算分数放入数据库即可。]]></content>
      <tags>
        <tag>业务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security Oauth 预备知识]]></title>
    <url>%2F2019%2F08%2F13%2FSpring-Security-Oauth-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[oAuth2基本概念oAuth2概念 Outh2是一个允许从Web、移动和桌面应用程序简单和标准方法进行安全授权的开放协议，Oauth2.0授权框架使用第三方应用程序能够获得对Web服务的有限访问权限。 Oauth2主要是完成了以下两件事情 对开发的应用站点进行安全授权 能够使第三方应用程序获取Web服务有限的访问权限 详情可参考Oauth2官网 oAuth2的角色Oauth2这个协议中，我们主要需要明确一个角色的概念 资源所有者：是被授予访问受保护资源的实体，如果它是一个人，它被称为最终用户(end-user) 资源服务器：是持有受保护资源的服务，可以接受并响应使用acess token访问受保护资源的请求 客户端：是资源所有者在其权限范围内发出受保护资源请求的应用，可以是运行在任何设备上的应用 授权服务器：是验证资源所有者权限并授权后发布access token 给客户端的服务 1234567891011121314151617+--------+ +---------------+| |--(A)- Authorization Request -&gt;| Resource || | | Owner || |&lt;-(B)-- Authorization Grant ---| || | +---------------+| || | +---------------+| |--(C)-- Authorization Grant --&gt;| Authorization || Client | | Server || |&lt;-(D)----- Access Token -------| || | +---------------+| || | +---------------+| |--(E)----- Access Token ------&gt;| Resource || | | Server || |&lt;-(F)--- Protected Resource ---| |+--------+ +---------------+ 上图是Oauh2官网对这几个角色交互的图解 （A）：客户端去请求资源所有者给它授权。这一步客户端可以直接去请求资源所有者获取授权，或者最好让授权服务器作为中间人（这就是授权码模式）。 （B）：客户端接受到用户的授权凭据，这里是通过Oauth2的4中授权模式或者扩展的模式去表达的，授权类型取决于客户端使用的类型和授权服务器支持的类型 （C）：客户端向授权服务器发送请求获取access token （D）：授权服务器进行客户端的认证，认证成功返回access token （E）：客户端使用access token访问资源服务器请求资源 （F）：资源服务器验证access token，验证成功，则响应请求 oAuth2的四种授权模式主要有 授权码模式（authorization code） 密码模式（resource owner password credentials） 简化模式（implicit） 客户端模式（client credentials） 扩展模式（extension） 具体详情参考 阮一峰 理解OAuth 2.0 oAuth2的使用方式客户端加密在 spring security oauth 中，推荐加密我们的客户端信息，客户端和授权服务器建立适合授权服务器安全要求的客户端认证方法。授权服务器可以接受满足其安全要求的任何形式的客户端身份验证。一般来说我们使用的是 密码验证 的方式加密我们的客户端信息。 推荐的方式是使用 HTTP Basic ，我们需要设置以下参数，当设置成功以后将客户端凭证加密存放在请求头中去请求授权信息，参数如下： 参数名称 是否必填 描述 client_id REQUIRED 客户端 id client_secret REQUIRED 客户端密码，如果客户机secret是空字符串，则客户机可以省略该参数 当我们请求的时候，需要设置相应的客户端认证信息，并存放在请求头中，设置方法如下： 1234567Authorization: Basic client_id：client_secret base64编码eg:client_id:webclient_secret:secret加密“web:secret” 得到 “QmFzaWMgd2ViOnNlY3JldA==”授权请求头中需要携带如下键值对：Authorization: Basic QmFzaWMgd2ViOnNlY3JldA== 这是保证客户端安全十分重要的一环，强烈推荐对客户端进行加密！ 授权码模式这是一种最为严密，安全性最高的授权模式，分为以下步骤 注意：以下所有请求必须在请求头中携带上一点客户端的加密信息 用户进入应用，携带一个重定向地址到授权服务器进行登录，在登录成功并且用户同意授权以后，授权服务器携带一个生成的授权码重定向到指定的重定向应用地址 应用携带接收到的授权码再次去请求授权服务器，在验证成功后，授权服务器下发token 所以需要两个请求，在 spring security oauth2 中，api 如下，我们将这些 api 称为 端点： 授权端点 /oauth/authorize：授权端点，通过此端点跳转到 授权服务器 进行认证，完成第一个请求。携带如下参数： 参数名称 是否必填 描述 response_type REQUIRED 必须为 code client_id REQUIRED 客户端的 id redirect_uri OPTIONAL 获取授权码后重定向地址 scope OPTIONAL 申请的权限范围 state RECOMMENDED 客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值，推荐。 授权成功的情况，会携带以下两个参数重定向到到 redirect_uri 中： 参数名称 是否必有 描述 code REQUIRED 授权服务器生成的授权代码。授权代码必须在发布后不久过期，以降低泄漏的风险。最大授权代码生命周期为10分钟 state REQUIRED 如果上一步中提供 state 参数，会原封不动地返回这个值。 如果授权失败会返回失败信息，失败可能是因为丢失，无效或者不匹配的重定向地址，或者客户端身份丢失和无效 授权服务器应该通知资源所有者错误信息，一定不能自动的重定向到失效的重定向地址 如果资源所有者拒绝访问请求，或者如果请求由于丢失或无效重定向URI以外的原因而失败，则授权服务器通过使用 application/x-www-form-urlencoded 格式向重定向 URI 的查询组件添加以下参数来通知客户端，参数如下：(对于 spring ，目前没有遇到 error_uri 属性) 参数名称 是否必有 值 描述 error REQUIRED invalid_request 请求缺少必需的参数，包括无效的参数值，不止一次地包含参数，或者存在其他形式的异常。 unauthorized_client 未授权客户端使用此方法请求授权代码。 access_denied 资源所有者或授权服务器拒绝了该请求。 unsupported_response_type 授权服务器不支持使用此方法获取授权代码。 invalid_scope 请求的作用域无效、未知或格式不正确。 server_error 授权服务器遇到意外情况，无法满足请求。(此错误代码是必需的，因为500内部服务器错误HTTP状态代码不能通过HTTP重定向返回给客户端。) temporarily_unavailable 由于服务器暂时过载或维护，授权服务器当前无法处理该请求。(此错误代码是必需的，因为503服务不可用的HTTP状态代码不能通过HTTP重定向返回给客户端。) error_description OPTIONAL - 提供附加信息的人类可读ASCII [USASCII]文本，用于帮助客户端开发人员理解所发生的错误。 error_uri OPTIONAL 一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。 令牌端点/oauth/token：令牌端点，通过上一步获取到的 授权码 验证与生成令牌，完成第二个请求，携带如下参数 参数名称 是否必填 描述 grant_type REQUIRED 使用的授权模式，值固定为”authorization_code” code REQUIRED 授权服务器获得的授权码 redirect_uri REQUIRED 重定向URI，必须与上一步中的该参数值保持一致 client_id REQUIRED 客户端的 id scope RECOMMENDED 授权范围，必须与第一步相同 如果访问令牌请求有效且经过授权，授权服务器将发出访问令牌和可选的刷新令牌，可以得到如下响应参数： 参数名称 是否必有 描述 是否有实现 access_token REQUIRED 授权服务器颁发的访问令牌 是 token_type REQUIRED 令牌类型，该值大小写不敏感，可以是bearer类型或mac类型 是 expires_in RECOMMENDED 过期时间，单位为秒 是 refresh_token OPTIONAL 表示更新令牌，用来获取下一次的访问令牌 是，需要设置 scope OPTIONAL 权限范围，如果有，则与客户端申请的范围一致 是 如果请求客户端身份验证失败或无效，授权服务器将返回错误响应，授权服务器使用HTTP 400（错误请求）状态代码进行响应（除非另有说明），并在响应中包含以下参数： 参数名称 是否必有 值 描述 error REQUIRED invalid_request 请求缺少必需的参数，包含不受支持的参数值(授权类型除外)，重复参数，包含多个凭据，使用多个机制来验证客户端，或者格式不正确。 invalid_client 客户端身份验证失败(例如，未知客户端、不包含客户端身份验证或不支持的身份验证方法)。授权服务器可以返回一个超文本传输协议401(未授权)状态码，以指示支持哪些超文本传输协议认证方案。如果客户端试图通过“授权”请求头字段进行身份验证，授权服务器必须用一个HTTP 401(未授权)状态代码进行响应，并包括与客户端使用的身份验证方案相匹配的“WWW-Authenticate”响应头字段。 invalid_grant 所提供的授权授予(例如，授权代码、资源所有者凭证)或刷新令牌无效、过期、已撤销、不匹配授权请求中使用的重定向URI，或已向其他客户机发出。 unauthorized_client 经过身份验证的客户端无权使用此授权授权类型。 unsupported_grant_type 授权服务器不支持授权授权类型。 invalid_scope 请求的范围无效、未知、格式错误或超出了资源所有者授予的范围。 error_description OPTIONAL - 提供附加信息的人类可读ASCII [USASCII]文本，用于帮助客户端开发人员理解所发生的错误。 error_uri OPTIONAL - 一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。 密码模式1234567891011121314151617+----------+| Resource || Owner || |+----------+ v | Resource Owner (A) Password Credentials | v+---------+ +---------------+| |&gt;--(B)---- Resource Owner -------&gt;| || | Password Credentials | Authorization || Client | | Server || |&lt;--(C)---- Access Token ---------&lt;| || | (w/ Optional Refresh Token) | |+---------+ +---------------+ 用户将用户名密码客户端交由客户端，由客户端去请求授权服务器颁发token 注意：以下所有请求必须在请求头中携带上一点客户端的加密信息 令牌端点 /oauth/token：令牌端点，携带如下参数请求即可： 请求参数 是否必填 描述 grant_type REQUIRED 使用的密码模式，值固定为”password” username REQUIRED 用户名 password REQUIRED 密码 scope OPTIONAL 请求权限范围 请求成功和失败的响应同授权码模式。 安全考虑 注意：以下所有请求都必须在请求头中携带上面所说的客户端加密信息！ 作为一个灵活且可扩展的框架，OAuth 的安全考虑取决于许多因素。spring security oauth 为我们提供了一些默认的端点如下： /oauth/authorize：授权端点 /oauth/token：令牌端点 /oauth/token：令牌端点也同时拥有刷新用户的功能，请求参数如下： 参数名称 是否必填 描述 grant_type REQUIRED 固定值为“refresh_token” refresh_token REQUIRED 请求到 token 时传过来的 refresh_token /oauth/confirm_access：用户确认授权提交端点 /oauth/error：授权服务错误信息端点 /oauth/check_token：用于资源服务访问的令牌解析端点，请求参数如下： 参数名称 是否必填 描述 token REQUIRED 得到的有效的令牌 /oauth/token_key：提供公有密匙的端点，如果你使用JWT令牌的话]]></content>
      <tags>
        <tag>spring security</tag>
      </tags>
  </entry>
</search>
